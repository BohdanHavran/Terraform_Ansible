---
- name: Fetch a linux distro name/version
  debug:
    msg:
    - "Hostname : {{ ansible_hostname }}"
    - "Linux distro name/version: {{ ansible_distribution }}/{{ ansible_distribution_version }}"

- name: Update apt cache
  apt:
    update_cache: yes

- name: Install packages
  apt: name={{ item }} update_cache=true state=present
  with_items:
  - python3-virtualenv
  - python3-dev
  - python3-pip
  - python3-psycopg2
  - python3-tk
  - virtualenv
  - git

- name: Creates directory
  file: path={{ project_name_path }} state=directory

- name: Clone a repo with separate git directory
  ansible.builtin.git:
    repo: https://github.com/digitalocean/sample-django.git
    dest: "/home/ubuntu/digitalocean"

- name: Create Settings File for Django
  template: src=settings.py.j2 dest=/home/ubuntu/digitalocean/mysite/settings.py

- name: Delete a line
  lineinfile:
    path: /home/ubuntu/digitalocean/requirements.txt
    line: 'backports.zoneinfo==0.2.1'
    state: absent

- name: Creating a virtualenv
  ansible.builtin.command: virtualenv /home/ubuntu/digitalocean/env

- name: Install specified python requirements
  ansible.builtin.pip:
    requirements: "/home/ubuntu/digitalocean/requirements.txt"
    virtualenv: /home/ubuntu/digitalocean/env

- name: Verify Permissions
  ansible.builtin.file:
    path: /home/ubuntu/digitalocean/manage.py
    mode: '0777'

- name: Migrate database
  community.general.django_manage:
    command: migrate
    project_path: "/home/ubuntu/digitalocean"
    virtualenv: "/home/ubuntu/digitalocean/env"
  async: 30
  poll: 0

- name: Get all static files
  community.general.django_manage:
    command: collectstatic
    project_path: "/home/ubuntu/digitalocean"
    virtualenv: "/home/ubuntu/digitalocean/env"

- name: Create Gunicorn Socket file
  template: src=gunicorn.socket.j2 dest=/etc/systemd/system/gunicorn.socket

- name: Create Gunicorn Service file
  template: src=gunicorn.service.j2 dest=/etc/systemd/system/gunicorn.service

- name: Start Gunicorn.socket
  shell: "/bin/systemctl start gunicorn.socket"

- name: Enable Gunicorn.socket
  shell: "/bin/systemctl enable gunicorn.socket"

---
- name: Fetch a linux distro name/version
  debug:
    msg:
    - "Hostname : {{ ansible_hostname }}"
    - "Linux distro name/version: {{ ansible_distribution }}/{{ ansible_distribution_version }}"

- name: Update apt cache
  apt:
    update_cache: yes

- name: Install dependencies for PostgreSQL
  apt: name={{ item }} update_cache=true state=latest
  with_items:
  - bash
  - openssl
  - libssl-dev
  - libssl-doc

- name: Install PostgreSQL
  apt: name={{ item }} update_cache=true state=present
  with_items:
  - postgresql
  - postgresql-contrib
  - libpq-dev
  - python3-psycopg2
- name: Ensure the PostgreSQL service is running
  service: name=postgresql state=started enabled=yes

- name: Create the database specified in vars
  become: true
  become_user: postgres
  postgresql_db: 
    name: "{{ db_name }}"
    template: 'template0'
    state: present

- name: Ensure user has access to the new database
  become: true
  become_user: postgres
  postgresql_user: 
    db: "{{ db_name }}"
    name: "{{ db_user }}"
    password: "{{ db_password }}"
    priv: ALL
    state: present

- name: Ensure user does not have unnecessary permissions
  become: true
  become_user: postgres
  postgresql_user: 
    name: "{{ db_user }}"
    role_attr_flags: NOSUPERUSER,NOCREATEDB
    state: present

- name: Make sure Postgres listens inbound
  become: true
  lineinfile:
    dest: "/etc/postgresql/{{ postgres_version }}/main/postgresql.conf"
    regexp: '^#?listen_addresses='
    line: "listen_addresses='{{ postgres_listen_addresses }}'"
    state: present
    create: yes
  notify: restart postgres

- name: Ensure app is able to make connects
  community.postgresql.postgresql_pg_hba:
    dest: /etc/postgresql/{{ postgres_version }}/main/pg_hba.conf
    contype: host
    users: "{{ db_user }}"
    databases: "{{ db_name }}"
    source: "{{ postgres_app_role_addresses }}"
    method: md5
    create: true
  notify: restart postgres
